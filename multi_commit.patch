From f1eafc8d8e2702df33ac8126e820c2fd3ccb3ec9 Mon Sep 17 00:00:00 2001
From: Toluwanimi Akinleye <toluwanimiakinleye01@gmail.com>
Date: Sat, 2 Sep 2023 15:07:02 +0100
Subject: [PATCH 1/3] fix: price same as bid price and ratio equal to 1

---
 client3.py | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/client3.py b/client3.py
index 3fc09b7..2883ff8 100644
--- a/client3.py
+++ b/client3.py
@@ -35,14 +35,16 @@ def getDataPoint(quote):
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price+ask_price)/2
     return stock, bid_price, ask_price, price
 
 
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
     """ ------------- Update this function ------------- """
-    return 1
+    if price_b == 0:
+        return
+    return price_a/price_b
 
 
 # Main
@@ -52,8 +54,10 @@ if __name__ == "__main__":
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
         """ ----------- Update to get the ratio --------------- """
+        prices = {}
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock] = price
             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-        print("Ratio %s" % getRatio(price, price))
+        print("Ratio %s" % getRatio(prices['ABC'], prices['DEF']))
-- 
2.37.3


From 41d452ebc175adc6675ebca0e469f4b6f73a1951 Mon Sep 17 00:00:00 2001
From: Toluwanimi Akinleye <toluwanimiakinleye01@gmail.com>
Date: Sat, 2 Sep 2023 15:51:56 +0100
Subject: [PATCH 2/3] test: added test cases

---
 client_test.py | 29 ++++++++++++++++++++++++++++-
 1 file changed, 28 insertions(+), 1 deletion(-)

diff --git a/client_test.py b/client_test.py
index af2bf26..047bcd2 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,5 +1,5 @@
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint, getRatio
 
 class ClientTest(unittest.TestCase):
   def test_getDataPoint_calculatePrice(self):
@@ -8,6 +8,10 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    test_quote = quotes[0]
+    predicted_result = (test_quote['top_ask']['price']+test_quote['top_bid']['price'])/2
+    price_result = getDataPoint(test_quote)
+    self.assertEqual(price_result[3], predicted_result)
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
@@ -15,10 +19,33 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    test_quote = quotes[0]
+    stock, bid_price, ask_price, price = getDataPoint(test_quote)
+    self.assertEqual(bid_price > ask_price, True)
 
 
   """ ------------ Add more unit tests ------------ """
 
+  def test_getRatio_whenPriceBZero(self):
+    quotes = [
+      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    price1 = getDataPoint(quotes[0])[3]
+    price2 = 0
+    predicted_ratio = None
+    self.assertEqual(getRatio(price1, price2), predicted_ratio)
+
+  def test_getRatio_whenPriceBNotZero(self):
+    quotes = [
+      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+    price1 = getDataPoint(quotes[0])[3]
+    price2 = getDataPoint(quotes[1])[3]
+    predicted_ratio = price1/price2
+    self.assertEqual(getRatio(price1, price2), predicted_ratio)
+
 
 
 if __name__ == '__main__':
-- 
2.37.3


From 0731941e18ac7fa0284f5dab997c4a1f2df8f5bc Mon Sep 17 00:00:00 2001
From: Toluwanimi Akinleye <toluwanimiakinleye01@gmail.com>
Date: Sat, 2 Sep 2023 16:11:10 +0100
Subject: [PATCH 3/3] fix: test case - now loops through quotes, and also does
 the correct operation for test_getDataPoint_calculatePriceBidGreaterThanAsk

---
 client_test.py | 25 ++++++++++++++-----------
 1 file changed, 14 insertions(+), 11 deletions(-)

diff --git a/client_test.py b/client_test.py
index 047bcd2..694e80e 100644
--- a/client_test.py
+++ b/client_test.py
@@ -8,10 +8,10 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
-    test_quote = quotes[0]
-    predicted_result = (test_quote['top_ask']['price']+test_quote['top_bid']['price'])/2
-    price_result = getDataPoint(test_quote)
-    self.assertEqual(price_result[3], predicted_result)
+    for quote in quotes:
+      predicted_result = (quote['top_ask']['price']+quote['top_bid']['price'])/2
+      price_result = getDataPoint(quote)
+      self.assertEqual(price_result[3], predicted_result)
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
@@ -19,9 +19,10 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
-    test_quote = quotes[0]
-    stock, bid_price, ask_price, price = getDataPoint(test_quote)
-    self.assertEqual(bid_price > ask_price, True)
+    for quote in quotes:
+      predicted_result = (quote['top_ask']['price']+quote['top_bid']['price'])/2
+      price_result = getDataPoint(quote)
+      self.assertEqual(price_result[3], predicted_result)
 
 
   """ ------------ Add more unit tests ------------ """
@@ -41,10 +42,12 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
-    price1 = getDataPoint(quotes[0])[3]
-    price2 = getDataPoint(quotes[1])[3]
-    predicted_ratio = price1/price2
-    self.assertEqual(getRatio(price1, price2), predicted_ratio)
+    prices = {}
+    for quote in quotes:
+      stock, bid_price, ask_price, price = getDataPoint(quote)
+      prices[stock] = price
+    predicted_ratio = prices['ABC']/prices['DEF']
+    self.assertEqual(getRatio(prices['ABC'],prices['DEF']), predicted_ratio)
 
 
 
-- 
2.37.3

